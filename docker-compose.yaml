services:
  authentication-db:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_DB=authentication
      - POSTGRES_USER=authentication
      - POSTGRES_PASSWORD=authentication
    container_name: authentication-db
    networks:
      - backend-app

  authorization-db:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_DB=authorization
      - POSTGRES_USER=authorization
      - POSTGRES_PASSWORD=authorization
    container_name: authorization-db
    networks:
      - backend-app
  
  recipes-db:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_DB=recipes
      - POSTGRES_USER=recipes
      - POSTGRES_PASSWORD=recipes
    container_name: recipes-db
    networks:
      - backend-app

  workout-db:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_DB=workout
      - POSTGRES_USER=workout
      - POSTGRES_PASSWORD=workout
    container_name: workout-db
    networks:
      - backend-app

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
      target: development
    container_name: api-gateway
    environment:
      NODE_ENV: development
      JWT_SECRET: my-secret
      REDIS_URL: redis:6379
    ports:
      - '3001:3000'
    depends_on:
      - redis
      - kafka
    volumes:
      - ./_docker/kafka/secrets:/etc/kafka/secrets
      - ./_docker/redis/certs:/etc/redis/certs
      - ./api-gateway/src:/app/src
    networks:
      - backend-app

  authentication-svc:
    build:
      context: ./authentication
      dockerfile: ./Dockerfile
      target: development
    container_name: authentication-svc
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://authentication:authentication@authentication-db:5432/authentication
      JWT_SECRET: my-secret
      KAFKA_BROKER: kafka:9093
      REDIS_URL: redis:6379
    depends_on:
      - authentication-db
      - kafka
    volumes:
      - ./_docker/kafka/secrets:/etc/kafka/secrets
      - ./authentication/src:/app/src
    networks:
      - backend-app

  authorization-svc:
    build:
      context: ./authorization
      dockerfile: ./Dockerfile
      target: development
    container_name: authorization-svc
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://authorization:authorization@authorization-db:5432/authorization
      JWT_SECRET: 'my-secret'
    ports:
      - '3000'
    depends_on:
      - authorization-db
      - kafka
    volumes:
      - ./_docker/kafka/secrets:/etc/kafka/secrets
      - ./authorization/src:/app/src
    networks:
      - backend-app

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend-app

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Internal listener for clients within the Docker network
      KAFKA_ADVERTISED_LISTENERS: SSL://kafka:9093
      KAFKA_LISTENERS: SSL://0.0.0.0:9093
      # SSL configuration
      KAFKA_SSL_KEYSTORE_FILENAME: kafka.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka.secret.txt
      KAFKA_SSL_KEY_CREDENTIALS: kafka.secret.txt
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka.secret.txt
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
    volumes:
      - ./_docker/kafka/secrets:/etc/kafka/secrets
    ports:
      - "9093"
    depends_on:
      - zookeeper
    networks:
      - backend-app

  redis:
    image: redis:latest
    container_name: redis
    command: >
      sh -c "chown -R redis:redis /usr/local/etc/redis/* &&
      exec redis-server
      --tls-port 6379
      --port 0
      --tls-cert-file /usr/local/etc/redis/redis-server.crt
      --tls-key-file /usr/local/etc/redis/redis-server.key
      --tls-ca-cert-file /usr/local/etc/redis/ca.crt
      --tls-auth-clients no
      --tls-replication yes"
    volumes:
      - ./_docker/redis/certs:/usr/local/etc/redis
    networks:
      - backend-app

networks:
  backend-app:
    external: true
    driver: bridge
